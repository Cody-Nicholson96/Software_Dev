Version Control Notes


Command Prompt File Compare: "FC file1 file2" Will display the differences between file1 and file2.



Terminal File Compare: "diff -u file1 file2" Will display the differences between file1 and file2 and -u stands for unified diff format and will make the result display better

"ls -a" - Will show the contents of a directory including hidden files.



Commit - Building block of Git, each one represents a version of the content at one point in time. User created checkpoint in the development of the project.

Commits: Fix off-by-one bugs, add new feature, and improve user docs

Type "git log" to view the commit history in the in the desired repository. This will display the commit id, author, date, and description of all of the commits.

To view the difference between two commits: Type "git diff OldCommitId NewCommitId". The commit Id does not include the word commit.

Commit often - every single unit of work should be committed separately to make the history organized for anyone who needs to go back and look at it later.

"git show commitId" - will show the changes between this commit and its parent. Useful after a merge when the commit history of one person is interweaved with the commit history of another person.



Repository - Agroup of files that you want to track together, for example: a .html file and a .css file to style it should go into the same repository since they will be affected by each others changes.

"git init" - creates a repository

"git status" - shows which files have changed since the last commit. Also shows what branch you are on. Displays the most recent commit.

A commit is a snapshot of every file in your repository, even if some of the files were not touched since the last commit they will be recommitted.

"git log --stat" - will show the git log with additional details about which files were changed in the repository because of the "--stat".

"git log -nX" - will show git commit history with only X amount of commits in the log.

Cloning a repository - By typing "git clone URLtoGitRepository" you can download a repository with its commit history intact.

"git checkout commitID" - temporarly change files back to an earlier commit state.

"git checkout master" will return you from any previous commit state to the most recent commit state.



GitHub

Clicking the "commits" tab in a repository will show you the history of the changes to the repository like "git log" does

remote - This is short for remote repository, which refers to the URL address of a repository on GitHub. You can push and pull branches from local space to GitHub using a remote.

push - send branch and commit history to GitHub

pull - take branch and commit history from GitHub

"git remote" - views remotes in repository

"git remote add remoteName remoteURL" - adds a remote named remoteName that connects the local repository to the github repository 

"git remote -v" - views the remotes in the repository will more details like URL link for fetching and pushing

"git push remoteName branchName" - Will push the branch to the repository that the remote URL leads to on GitHub.

"git pull remoteName branchName" - Will pull the branch from the GitHub repository to the local repository

Forking a repository - clones a GitHub repository to your GitHub profile for your own personal use that will not affect the original repository you forked. 

The orgininal repository will simply display a number of times forked. 

You can then clone the repository you forked to your own local repository from your profile to make canges locally.

To allow someone to puch and pull to your repository you need to add them as a collaborater

Cloning from GitHub - There will be a clone link on the repositorys main page. Use "git clone cloneURL" to clone a repository to your local repository.

Cloning like this^ from github will automatically create a remote for you to this repository on GitHub

"git fetch" - Like git pull, this will update your local repository with the lastest information, but this will put the information in a new branch that will be named "remoteName/branchName".

"git pull remoteName branchName" = "git fetch remoteName" + "git merge branchName remoteName/branchName". "remoteName/branchName" is the branch created when you "git fetch remoteName", before you merge.



Comparing working directory, staging area, and repository: 

You can use "git add fileName" to copy a file from the working directory to the staging area. 

Once in the staging area you can commit this file using "git commit" to copy the files in the staging area into the repository.

If a file is in the staging area but not in the repository you can use "git diff --staged" to view the differences between the files in staged and the files in the repository.

"git reset --hard" will discard any changes in either the working directory or the staging area. THIS IS PERMANENT!

"git diff" - compares working directory with staging area

"git diff staged" - comares staging area with the most recent commit

"git diff commit1 commit2" - compares commit1 with commit2

"git show commitId" - will show the changes between this commit and its parent. Useful after a merge when the commit history of one person is interweaved with the commit history of another person.



Error Messages:

Detached HEAD state - The HEAD in Git is the most recent commit. When you do a git checkout, you will be in detached head state because you are no longer dealing with the most recent project code, you will be dealing with past project code.



Branches - A copy of the master branch that you can use for experimental work, like introducing a new feature that you are unsure of if it will work. 

Every branch will have its own unique commit history that is independent of other branches

The working main branch is called the master branch

If your feature ends up working out, then you can combine your experimental feature branch with your master branch in a process called merging. 

"git branch" will display all of the branches in a repository

"git branch branchName" will create a new branch with name "branchName" in this case

By typing "git checkout branchName" you can switch branches to the new branch I created using the above git command

Times to create new branches: moving on to a different piece of work, creating new features, fixing a bug.

You can have a production branch of code that will always work and then a dev branch for developing new featues

"remote branch" means it is a branch you did not create yourself

"git log --graph --oneline branch1 branch2" will display the commit history for two different branches named branch1 and branch2. --oneline will make sure that it displays as little information as possible while still provifing you with the commit ids and descriptions of each commit to each branch.

"git checkout -b newBranchName" is the same as running "git branch newBranchName" and then "git checkout newBranchName"

When you merge a branch, say dev branch, into the master branch you can then delete the dev branch after the merge is complete. Doing this will only delete the label "dev", and will not effect the commit history because the dev branch commit history will be stored in the master branch after the merge is complete.

Be careful when merging branches because if done carelessly you can lose access to the commit history of other branches by merging.

"git merge branchName1 branchName2" will merge the two branches together. Leave a description or accept the one that is provided for you by git.

"git branch -d branchName" - will delete the branch label branchName, but will keep the commit history of that branch.



Keeping a fork up to date - You should have a remote pointing to your fork, but you should also make a remote pointing to the original github repository youforked from called "upstream". fetch the up-stream to add the "upstream/master" branch to your local repository which you can merge into master.



Merging

fast-forward merging - happens when the branch you are merging into is an ancestor of the branch you are merging from.



Merging Conflicts

The top section is the users code, the middle is the original code that both branches modified, and the bottom is the code that was from the other branch.

Choose what code to discard and what to keep manually, delete the special characters added by Git, commit the changes to complete the merge.



Workflow to get feedback on project before you update to master branch.

1. Have a copy of the code on github locally
2. Create a new branch "change" locally, and add your change.
3. Push that change to your fork on GitHub
4. Make a pull request (or merge request) on GitHub
5. If there are multiple pull requests you can solve them one at a time